{"version":3,"file":"YogaLayout.js","sourceRoot":"","sources":["YogaLayout.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../global.d.ts\" />\n\nimport * as Yoga from \"yoga-layout-prebuilt-low-memory\";\nimport * as PIXI from \"pixi.js\";\nimport {YogaConstants} from \"./YogaContants\";\nimport {YogaLayoutConfig} from \"./YogaLayoutConfig\";\nimport {yogaAnimationManager} from \"./YogaAnimationManager\";\nimport {GlobalMixins} from \"../global\";\nimport YogaEdges = YogaConstants.YogaEdges;\nimport ComputedLayout = YogaConstants.ComputedLayout;\nimport FlexDirection = YogaConstants.FlexDirection;\nimport JustifyContent = YogaConstants.JustifyContent;\nimport Align = YogaConstants.Align;\nimport FlexWrap = YogaConstants.FlexWrap;\nimport Display = YogaConstants.Display;\nimport PositionType = YogaConstants.PositionType;\nimport DisplayObject = GlobalMixins.DisplayObject;\n//import {GlobalMixins} from \"../global\";\n//import DisplayObject = GlobalMixins.DisplayObject;\n\nexport type PixelsOrPercentage = number | string;\nexport type YogaSize = PixelsOrPercentage | \"pixi\" | \"auto\";\n\nexport interface IAnimationState {\n    fromX: number;\n    fromY: number;\n    curX: number;\n    curY: number;\n    toX: number;\n    toY: number;\n    time: number;\n    elapsed: number;\n    easing: (progress: number) => number;\n}\n\n\ninterface IDisplayObject {\n    _yogaLayoutHash: number;\n    _prevYogaLayoutHash: number;\n    __yoga: YogaLayout;\n    yoga: YogaLayout;\n    /**\n     * Internal property for fast checking if object has yoga\n     */\n    __hasYoga: boolean;\n    _visible: boolean;\n\n    /**\n     * Applies yoga layout to DisplayObject\n     */\n    updateYogaLayout(): void;\n\n    /**\n     * Checks boundaries of DisplayObject and emits NEED_LAYOUT_UPDATE if needed\n     */\n    checkIfBoundingBoxChanged(): void;\n}\n\n\nexport interface IYogaAnimationConfig {\n    time: number;\n    easing: (progress: number) => number;\n\n    shouldRunAnimation?(yoga: YogaLayout, prev: ComputedLayout, newLayout: ComputedLayout): boolean;\n\n}\n\ntype NewDisplayObject = DisplayObject & Partial<IDisplayObject> & any;\n\nexport class YogaLayout {\n\n    /**\n     * Internal value. True if we are currently in WebGLRenderer.render() (based on 'prerender' and 'postrender' events). Used to skip some updateTransform calls.\n     */\n    public static isRendering: boolean = true;\n\n    /**\n     * Experimental feature for building layouts independent of pixi tree\n     */\n    public static roots: Map<string, YogaLayout> = new Map();\n    public static readonly LAYOUT_UPDATED_EVENT = \"LAYOUT_UPDATED_EVENT\";\n    public static readonly AFTER_LAYOUT_UPDATED_EVENT = \"AFTER_LAYOUT_UPDATED_EVENT\";\n    public static readonly NEED_LAYOUT_UPDATE = \"NEED_LAYOUT_UPDATE\";\n    public readonly target: NewDisplayObject;\n    public readonly node: Yoga.YogaNode;\n    public children: YogaLayout[] = [];\n    public parent?: YogaLayout;\n\n\n    /**\n     * If set, position transitions will be animated\n     */\n    public animationConfig: IYogaAnimationConfig;\n\n    /**\n     * True if Yoga should manage PIXI objects width/height\n     */\n    public rescaleToYoga: boolean = false;\n\n    /**\n     * If true and rescaleToYoga===true, resizing will keep aspect ratio of obejct.\n     * Defaults to true on PIXI.Text and PIXI.Sprite.\n     */\n    public keepAspectRatio: boolean | undefined;\n    public aspectRatioMainDiemension: \"height\" | \"width\" = \"height\";\n\n    private _width: YogaSize;\n    private _height: YogaSize;\n    private _cachedLayout: ComputedLayout | undefined;\n    private _lastLayout: ComputedLayout | undefined;\n    private _lastRecalculationDuration = 0;\n    private _animation: IAnimationState;\n\n\n    /**\n     * Will be recalculated in next frame\n     */\n    private _needUpdateAsRoot: boolean = false;\n\n    /**\n     * Used instead of Yoga.AspectRatio because of Yoga issue https://github.com/facebook/yoga/issues/677\n     */\n    private _aspectRatio: number;\n\n    private _gap: number = 0;\n\n\n    /**\n     * Internal values stored to reduce calls to nbind\n     */\n    private _marginTop: number = 0;\n    private _marginLeft: number = 0;\n\n    constructor(_disObj: NewDisplayObject) {\n        this.node = Yoga.Node.create();\n        _disObj.__hasYoga = true;\n        this.fillDefaults();\n        this.target = _disObj;\n        if ((<any>this.target)._texture) {\n            this.width = this.height = \"pixi\";\n        } else {\n            this.width = this.height = \"auto\";\n        }\n\n        if (_disObj instanceof PIXI.Text || _disObj instanceof PIXI.Sprite) {\n            this.keepAspectRatio = true;\n        }\n\n        if (_disObj instanceof PIXI.Text) {\n            this.aspectRatioMainDiemension = \"width\";\n        }\n\n        // broadcast event\n        _disObj.on(YogaLayout.LAYOUT_UPDATED_EVENT as any, () => {\n            this._lastLayout = this._cachedLayout;\n            this._cachedLayout = undefined;\n            (this.children as any & Partial<IDisplayObject> & PIXI.DisplayObject).forEach(child => child.target.emit(YogaLayout.LAYOUT_UPDATED_EVENT))\n        })\n\n        _disObj.on(YogaLayout.NEED_LAYOUT_UPDATE as any, () => {\n            // size change of this element wont change size/positions of its parent, so there is no need to update whole tree\n            if (!this.parent /*|| (this.hasContantDeclaredSize && this.parent.width !== \"auto\" && this.parent.height !== \"auto\")*/) {\n                this._needUpdateAsRoot = true;\n            } else {\n                this.parent.target.emit(YogaLayout.NEED_LAYOUT_UPDATE)\n            }\n        })\n    }\n\n    public get animationState(): Readonly<IAnimationState> {\n        return this._animation;\n    }\n\n    public set root(val: string) {\n        const root = YogaLayout.roots.get(val);\n        if (root) {\n            root.addChild(this);\n        }\n    }\n\n    /**\n     * Assigns given properties to this yoga layout\n     * @param config\n     */\n    public fromConfig(config: YogaLayoutConfig) {\n        Object.assign(this, config);\n    }\n\n    /**\n     * Same as 'fromConfig()'\n     * @param config\n     */\n    public set config(config: YogaLayoutConfig) {\n        this.fromConfig(config);\n    }\n\n    /**\n     * Copies all properties (styles, size, rescaleToYoga etc) from other YogaLayout objects\n     * @param layout\n     */\n    public copy(layout: YogaLayout): void {\n        this.node.copyStyle(layout.node);\n        this.rescaleToYoga = layout.rescaleToYoga;\n        this.aspectRatio = layout.aspectRatio;\n        this.keepAspectRatio = layout.keepAspectRatio;\n        this._width = layout._width;\n        this._height = layout._height;\n    }\n\n    public fillDefaults() {\n        this.node.setFlexDirection(Yoga.FLEX_DIRECTION_ROW);\n        this.node.setAlignItems(Yoga.ALIGN_FLEX_START);\n        this.node.setAlignContent(Yoga.ALIGN_FLEX_START)\n        this.node.setWidth(\"auto\");\n        this.node.setHeight(\"auto\");\n    }\n\n    public addChild(yoga: YogaLayout, index = this.node.getChildCount()): void {\n        if (yoga.parent) {\n            yoga.parent.removeChild(yoga);\n        }\n        this.node.insertChild(yoga.node, index)\n        this.children.splice(index, 0, yoga);\n        yoga.parent = this;\n        this.updateGap();\n    }\n\n\n    public removeChild(yoga: YogaLayout): void {\n        const length = this.children.length;\n        this.children = this.children.filter(child => child !== yoga);\n        if (length !== this.children.length) {\n            this.node.removeChild(yoga.node);\n        }\n        yoga.parent = undefined;\n    }\n\n    /**\n     * Mark object as dirty and request layout recalculation\n     */\n    public requestLayoutUpdate(): void {\n        this.target.emit(YogaLayout.NEED_LAYOUT_UPDATE);\n    }\n\n    public recalculateLayout(): void {\n        const start = performance.now()\n        this.node.calculateLayout();\n        this._lastRecalculationDuration = performance.now() - start;\n        // console.log(\"recalculated: \", this._lastRecalculationDuration, this)\n        this.target.emit(YogaLayout.LAYOUT_UPDATED_EVENT);\n    }\n\n    public update(): void {\n        if (!this.target.parent && this.parent) {\n            this.parent.removeChild(this);\n            return;\n        }\n\n        if (this._needUpdateAsRoot && !this.parent) {\n            this.recalculateLayout();\n        }\n        this._needUpdateAsRoot = false;\n    }\n\n    public get isRoot(): boolean {\n        return !this.parent;\n    }\n\n    /**\n     * Returns true if object size is independent of its children sizes.\n     */\n    public get hasContantDeclaredSize(): boolean {\n        return !!this._width && this._width !== \"pixi\" && this._width !== \"auto\"\n            && !!this._height && this._height !== \"pixi\" && this._height !== \"auto\";\n    }\n\n    public willLayoutWillBeRecomputed(): boolean {\n        return !this._cachedLayout;\n    }\n\n    public getComputedLayout(): ComputedLayout {\n        if (!this._cachedLayout) {\n            this._cachedLayout = this.node.getComputedLayout();\n\n            // YOGA FIX for percent widht/height for absolute positioned elements\n            if (this.position === \"absolute\" && this.parent && this.node.getWidth().unit === Yoga.UNIT_PERCENT) {\n                this._cachedLayout.width = Math.round(parseFloat(this._width as string) / 100 * this.parent.calculatedWidth)\n            }\n\n            if (this.position === \"absolute\" && this.parent && this.node.getHeight().unit === Yoga.UNIT_PERCENT) {\n                this._cachedLayout.height = Math.round(parseFloat(this._height as string) / 100 * this.parent.calculatedHeight)\n            }\n\n            // if (this.position === \"absolute\" && this.parent && !this.bottom && !this.right) {\n            //     this._cachedLayout.left = this.node.getComputedMargin(Yoga.EDGE_LEFT);\n            //     this._cachedLayout.top = this.node.getComputedMargin(Yoga.EDGE_TOP)\n            // }\n\n            // YOGA FIX for not working aspect ratio https://github.com/facebook/yoga/issues/677\n            if (this._aspectRatio && this.keepAspectRatio) {\n                if (this.aspectRatioMainDiemension === \"height\") {\n                    const newWidth = this.calculatedHeight / this._aspectRatio;\n                    //   this._cachedLayout.top += (this.calculatedHeight - newHeight) / 2;\n                    this._cachedLayout.width = newWidth;\n                    this.width = this.calculatedWidth;\n                } else {\n                    const newHeight = this.calculatedWidth / this._aspectRatio;\n                    this._cachedLayout.height = newHeight;\n                    this.height = this.calculatedHeight;\n                }\n            }\n\n            if (this.animationConfig && (!this.animationConfig.shouldRunAnimation || this.animationConfig.shouldRunAnimation(this, this._lastLayout || this._cachedLayout, this._cachedLayout))) {\n                this._animation = {\n                    fromX: this._lastLayout?.left || this._cachedLayout.left,\n                    fromY: this._lastLayout?.top || this._cachedLayout.top,\n                    curX: this._lastLayout?.left || this._cachedLayout.left,\n                    curY: this._lastLayout?.top || this._cachedLayout.top,\n                    toX: this._cachedLayout.left,\n                    toY: this._cachedLayout.top,\n                    time: this.animationConfig.time,\n                    elapsed: 0,\n                    easing: this.animationConfig.easing\n                }\n\n                yogaAnimationManager.add(this._animation);\n            } else {\n                this._animation = <any>{\n                    curX: this._cachedLayout.left,\n                    curY: this._cachedLayout.top\n                }\n            }\n\n        }\n\n        this._cachedLayout.left = this._animation.curX;\n        this._cachedLayout.top = this._animation.curY;\n\n        return this._cachedLayout;\n    }\n\n    public set aspectRatio(value: number) {\n        if (this._aspectRatio === value) {\n            return;\n        }\n        this._aspectRatio = value;\n        this.requestLayoutUpdate();\n    }\n\n    public get aspectRatio(): number {\n        return this._aspectRatio;\n    }\n\n    public get isWidthCalculatedFromPixi(): boolean {\n        return this._width === \"pixi\"\n    }\n\n    public get isHeightCalculatedFromPixi(): boolean {\n        return this._height === \"pixi\"\n    }\n\n    /**\n     * Returns computed width in pixels\n     */\n    public get calculatedWidth(): number {\n        return this._cachedLayout ? this._cachedLayout.width : this.node.getComputedWidth();\n    }\n\n    /**\n     * Returns computed height in pixels\n     */\n    public get calculatedHeight(): number {\n        return this._cachedLayout ? this._cachedLayout.height : this.node.getComputedHeight();\n    }\n\n    /**\n     * Can handle:\n     * - pixels (eg 150)\n     * - percents (\"50%\")\n     * - \"auto\" to use values from yoga\n     * - \"pixi\" to use DisplayObject.width/height\n     * @param value\n     */\n    public set width(value: YogaSize) {\n        if (this._width === value) {\n            return;\n        }\n        this._width = value;\n        if (value !== \"pixi\") {\n            this.node.setWidth(value);\n        }\n        this.requestLayoutUpdate();\n    }\n\n    public get width(): YogaSize {\n        return this._parseValue(this.node.getWidth());\n    }\n\n    /**\n     * Can handle:\n     * - pixels (eg 150)\n     * - percents (\"50%\")\n     * - \"auto\" to use values from yoga\n     * - \"pixi\" to use DisplayObject.width/height\n     * @param value\n     */\n    public set height(value: YogaSize) {\n        if (this._height === value) {\n            return;\n        }\n        this._height = value;\n        if (value !== \"pixi\") {\n            this.node.setHeight(value);\n        }\n        this.requestLayoutUpdate();\n    }\n\n    public get height(): YogaSize {\n        return this._parseValue(this.node.getHeight());\n    }\n\n    public set flexDirection(direction: keyof typeof FlexDirection) {\n        this.node.setFlexDirection(<Yoga.YogaFlexDirection>YogaConstants.FlexDirection[direction]);\n        this.updateGap();\n        this.requestLayoutUpdate();\n    }\n\n    public get flexDirection(): keyof typeof FlexDirection {\n        return YogaConstants.FlexDirection[this.node.getFlexDirection()] as any;\n    }\n\n    public set justifyContent(just: keyof typeof JustifyContent) {\n        this.node.setJustifyContent(<Yoga.YogaJustifyContent>YogaConstants.JustifyContent[just]);\n        this.requestLayoutUpdate();\n    }\n\n    public get justifyContent(): keyof typeof JustifyContent {\n        return YogaConstants.JustifyContent[this.node.getJustifyContent()] as any;\n    }\n\n    public set alignContent(align: keyof typeof Align) {\n        this.node.setAlignContent(<Yoga.YogaAlign>YogaConstants.Align[align]);\n        this.requestLayoutUpdate();\n    }\n\n    public get alignContent(): keyof typeof Align {\n        return YogaConstants.Align[this.node.getAlignContent()] as any;\n    }\n\n    public set alignItems(align: keyof typeof Align) {\n        this.node.setAlignItems(<Yoga.YogaAlign>YogaConstants.Align[align]);\n        this.requestLayoutUpdate();\n    }\n\n    public get alignItems(): keyof typeof Align {\n        // @ts-ignore\n        return YogaConstants.Align[this.node.getAlignItems()];\n    }\n\n    public set alignSelf(align: keyof typeof Align) {\n        this.node.setAlignSelf(<Yoga.YogaAlign>YogaConstants.Align[align]);\n        this.requestLayoutUpdate();\n    }\n\n    public get alignSelf(): keyof typeof Align {\n        // @ts-ignore\n        return YogaConstants.Align[this.node.getAlignSelf()];\n    }\n\n    public set flexWrap(wrap: keyof typeof FlexWrap) {\n        this.node.setFlexWrap(<Yoga.YogaFlexWrap>YogaConstants.FlexWrap[wrap]);\n        this.requestLayoutUpdate();\n    }\n\n    public get flexWrap(): keyof typeof FlexWrap {\n        // @ts-ignore\n        return YogaConstants.FlexWrap[this.node.getFlexWrap()];\n    }\n\n    public set flexGrow(grow: number) {\n        this.node.setFlexGrow(grow)\n        this.requestLayoutUpdate();\n    }\n\n    public get flexGrow(): number {\n        return this.node.getFlexGrow();\n    }\n\n    public set flexShrink(shrink: number) {\n        this.node.setFlexShrink(shrink);\n        this.requestLayoutUpdate();\n    }\n\n    public get flexShrink(): number {\n        return this.node.getFlexShrink();\n    }\n\n    public set flexBasis(basis: number) {\n        this.node.setFlexBasis(basis);\n        this.requestLayoutUpdate();\n    }\n\n    public get flexBasis(): number {\n        return this.node.getFlexBasis();\n    }\n\n    public set position(type: keyof typeof PositionType) {\n        this.node.setPositionType(<Yoga.YogaPositionType>YogaConstants.PositionType[type]);\n        this.requestLayoutUpdate();\n    }\n\n    public get position(): keyof typeof PositionType {\n        // @ts-ignore\n        return YogaConstants.PositionType[this.node.getPositionType()];\n    }\n\n    public set padding(margin: number[]) {\n        YogaEdges.forEach((edge, index) => {\n            const value = margin[index];\n            this.node.setPadding(edge, value)\n        })\n        this.requestLayoutUpdate();\n    }\n\n    public get padding(): number[] {\n        return YogaEdges.map(edge => this.node.getPadding(edge).value || 0);\n    }\n\n    public set paddingAll(value: number) {\n        this.padding = [value, value, value, value];\n    }\n\n    public set paddingTop(value: number) {\n        this.node.setPadding(Yoga.EDGE_TOP, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get paddingTop(): number {\n        return this.node.getPadding(Yoga.EDGE_TOP).value || 0;\n    }\n\n    public set paddingBottom(value: number) {\n        this.node.setPadding(Yoga.EDGE_BOTTOM, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get paddingBottom(): number {\n        return this.node.getPadding(Yoga.EDGE_BOTTOM).value || 0;\n    }\n\n    public set paddingLeft(value: number) {\n        this.node.setPadding(Yoga.EDGE_LEFT, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get paddingLeft(): number {\n        return this.node.getPadding(Yoga.EDGE_LEFT).value || 0;\n    }\n\n    public set paddingRight(value: number) {\n        this.node.setPadding(Yoga.EDGE_RIGHT, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get paddingRight(): number {\n        return this.node.getPadding(Yoga.EDGE_RIGHT).value || 0;\n    }\n\n    public set margin(margin: number[]) {\n        YogaEdges.forEach((edge, index) => {\n            const value = margin[index];\n            this.node.setMargin(edge, value)\n        })\n        this.requestLayoutUpdate();\n    }\n\n    public set marginAll(value: number) {\n        this.margin = [value, value, value, value];\n    }\n\n    public get margin(): number[] {\n        return YogaEdges.map(edge => this.node.getMargin(edge).value || 0);\n    }\n\n\n    public set marginTop(value: number) {\n        if (this._marginTop !== value) {\n            this._marginTop = value;\n            this.node.setMargin(Yoga.EDGE_TOP, value)\n            this.requestLayoutUpdate();\n        }\n    }\n\n    public get marginTop(): number {\n        return this._marginTop;\n    }\n\n    public set marginBottom(value: number) {\n        this.node.setMargin(Yoga.EDGE_BOTTOM, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get marginBottom(): number {\n        return this.node.getMargin(Yoga.EDGE_BOTTOM).value || 0;\n    }\n\n    public set marginLeft(value: number) {\n        if (this._marginLeft !== value) {\n            this._marginLeft = value;\n            this.node.setMargin(Yoga.EDGE_LEFT, value)\n            this.requestLayoutUpdate();\n        }\n    }\n\n    public get marginLeft(): number {\n        return this._marginLeft;\n    }\n\n    public set marginRight(value: number) {\n        this.node.setMargin(Yoga.EDGE_RIGHT, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get marginRight(): number {\n        return this.node.getMargin(Yoga.EDGE_RIGHT).value || 0;\n    }\n\n    public set border(margin: number[]) {\n        YogaEdges.forEach((edge, index) => {\n            const value = margin[index];\n            this.node.setBorder(edge, value)\n        })\n        this.requestLayoutUpdate();\n    }\n\n    public get border(): number[] {\n        return YogaEdges.map(edge => this.node.getBorder(edge));\n    }\n\n    public set borderAll(value: number) {\n        this.border = [value, value, value, value];\n    }\n\n    public set borderTop(value: number) {\n        this.node.setBorder(Yoga.EDGE_TOP, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get borderTop(): number {\n        return this.node.getBorder(Yoga.EDGE_TOP);\n    }\n\n    public set borderBottom(value: number) {\n        this.node.setBorder(Yoga.EDGE_BOTTOM, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get borderBottom(): number {\n        return this.node.getBorder(Yoga.EDGE_BOTTOM);\n    }\n\n    public set borderLeft(value: number) {\n        this.node.setBorder(Yoga.EDGE_LEFT, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get bordereft(): number {\n        return this.node.getBorder(Yoga.EDGE_LEFT);\n    }\n\n    public set borderRight(value: number) {\n        this.node.setBorder(Yoga.EDGE_RIGHT, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get borderRight(): number {\n        return this.node.getBorder(Yoga.EDGE_RIGHT);\n    }\n\n    public set top(value: PixelsOrPercentage) {\n        this.node.setPosition(Yoga.EDGE_TOP, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get top(): PixelsOrPercentage {\n        return this._parseValue(this.node.getPosition(Yoga.EDGE_TOP));\n    }\n\n    public set bottom(value: PixelsOrPercentage) {\n        this.node.setPosition(Yoga.EDGE_BOTTOM, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get bottom(): PixelsOrPercentage {\n        return this._parseValue(this.node.getPosition(Yoga.EDGE_BOTTOM));\n    }\n\n    public set left(value: PixelsOrPercentage) {\n        this.node.setPosition(Yoga.EDGE_LEFT, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get left(): PixelsOrPercentage {\n        return this._parseValue(this.node.getPosition(Yoga.EDGE_LEFT));\n    }\n\n    public set right(value: PixelsOrPercentage) {\n        this.node.setPosition(Yoga.EDGE_RIGHT, value)\n        this.requestLayoutUpdate();\n    }\n\n    public get right(): PixelsOrPercentage {\n        return this._parseValue(this.node.getPosition(Yoga.EDGE_RIGHT));\n    }\n\n    public set minWidth(value: PixelsOrPercentage) {\n        this.node.setMinWidth(value);\n        this.requestLayoutUpdate();\n    }\n\n    public get minWidth(): PixelsOrPercentage {\n        return this._parseValue(this.node.getMinWidth())\n    }\n\n    public set minHeight(value: PixelsOrPercentage) {\n        this.node.setMinHeight(value);\n        this.requestLayoutUpdate();\n    }\n\n    public get minHeight(): PixelsOrPercentage {\n        return this._parseValue(this.node.getMinHeight())\n    }\n\n    public set maxWidth(value: PixelsOrPercentage) {\n        this.node.setMaxWidth(value);\n        this.requestLayoutUpdate();\n    }\n\n    public get maxWidth(): PixelsOrPercentage {\n        return this._parseValue(this.node.getMaxWidth())\n    }\n\n    public set maxHeight(value: PixelsOrPercentage) {\n        this.node.setMaxHeight(value);\n        this.requestLayoutUpdate();\n    }\n\n    public get maxHeight(): PixelsOrPercentage {\n        return this._parseValue(this.node.getMaxHeight())\n    }\n\n    public set display(value: keyof typeof Display) {\n        this.node.setDisplay(<Yoga.YogaDisplay>YogaConstants.Display[value]);\n        this.requestLayoutUpdate();\n    }\n\n    public get display(): keyof typeof Display {\n        // @ts-ignore\n        return Display[this.node.getDisplay()];\n    }\n\n    public set gap(val: number) {\n        if (this._gap === val) {\n            return;\n        }\n        this._gap = val;\n        this.updateGap();\n        this.requestLayoutUpdate();\n    }\n\n    public get gap() {\n        return this._gap;\n    }\n\n    public updateGap(): void {\n        if (!this._gap) {\n            return;\n        }\n\n        let firstChildrenSkipped = false;\n        this.children.forEach((child, index) => {\n            if (firstChildrenSkipped) {\n                this.flexDirection === \"column\" ? child.marginTop = this._gap : child.marginLeft = this._gap;\n            }\n\n            if (child.position !== \"absolute\") {\n                firstChildrenSkipped = true;\n            }\n        })\n    }\n\n    private _parseValue(value: { unit: any, value: any }): PixelsOrPercentage {\n        if (value.unit === Yoga.UNIT_POINT) {\n            return parseFloat(value.value)\n        }\n\n        if (value.unit === Yoga.UNIT_PERCENT) {\n            return value.value.toString() + \"%\";\n        }\n\n        if (value.unit === Yoga.UNIT_AUTO) {\n            return \"auto\";\n        }\n        return undefined as any;\n    }\n\n\n}\n"]}